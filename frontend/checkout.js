// checkout.js - Fixed Version
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Checkout page loaded');
    
    // --- Element References ---
    const summaryItemsList = document.getElementById('summary-items-list');
    const subtotalPriceEl = document.getElementById('subtotal-price');
    const totalPriceEl = document.getElementById('total-price');
    const checkoutForm = document.getElementById('checkout-form');
    const promoCodeInput = document.getElementById('promo-code-input');
    const applyPromoBtn = document.getElementById('apply-promo-btn');
    const discountRow = document.getElementById('discount-row');
    const discountAmountEl = document.getElementById('discount-amount');
    const qrModal = document.getElementById('qr-modal');
    const qrCodeContainer = document.getElementById('qrcode-container');
    const closeModalBtn = document.querySelector('.close-button');
    const paymentTimerContainer = document.getElementById('payment-timer-container');
    const paymentConfirmedBtn = document.getElementById('payment-confirmed-btn');
    const orderSuccessModal = document.getElementById('order-success-modal');
    const orderNumberSpan = document.getElementById('order-number-span');
    const cancelOrderBtn = document.getElementById('cancel-order-btn');

    // --- Variables ---
    let cart = JSON.parse(localStorage.getItem('shoppingCart')) || [];
    let subtotal = 0;
    let discount = 0;
    let currentPromoCode = null;
    let createdOrderNumber = null;
    let countdownInterval = null;
    let countdownEndTime = 0;
    let promptpayConfig = null;

    // --- Helper Functions ---
    function updateTotals() {
        const total = subtotal - discount;
        if (discount > 0) {
            discountAmountEl.textContent = `-${discount.toFixed(2)}‡∏ø`;
            discountRow.style.display = 'flex';
        } else {
            discountRow.style.display = 'none';
        }
        subtotalPriceEl.textContent = `${subtotal.toFixed(2)}‡∏ø`;
        totalPriceEl.textContent = `${total.toFixed(2)}‡∏ø`;
    }

    function renderCart() {
        console.log('üìã Rendering cart:', cart.length, 'items');
        
        if (!summaryItemsList) {
            console.error('‚ùå Summary list element not found');
            return;
        }
        
        if (cart.length === 0) {
            alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
            window.location.href = 'index.html';
            return;
        }
        
        summaryItemsList.innerHTML = '';
        subtotal = 0;
        
        cart.forEach(item => {
            const quantity = item.quantity || 1;
            const priceNumber = parseFloat(item.price.replace('‡∏ø', ''));
            const itemTotalPrice = priceNumber * quantity;
            subtotal += itemTotalPrice;
            
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('summary-item');
            itemDiv.innerHTML = `
                <div class="summary-item-info">
                    <span class="summary-item-name">${item.name}</span>
                    <div class="summary-item-controls">
                        <div class="quantity-controls">
                            <button class="quantity-btn minus-btn" data-id="${item.id}">-</button>
                            <span class="quantity-text">x${quantity}</span>
                            <button class="quantity-btn plus-btn" data-id="${item.id}">+</button>
                        </div>
                        <span class="summary-item-price">${itemTotalPrice.toFixed(2)}‡∏ø</span>
                    </div>
                </div>
                <input type="text" class="note-input" data-id="${item.id}" 
                       placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å)" 
                       value="${item.notes || ''}">
            `;
            summaryItemsList.appendChild(itemDiv);
        });
        
        updateTotals();
        console.log('‚úÖ Cart rendered. Subtotal:', subtotal);
    }
    
    function saveCart() {
        localStorage.setItem('shoppingCart', JSON.stringify(cart));
    }
    
    function saveAndReRender() {
        saveCart();
        renderCart();
    }
    
    function managePaymentCountdown() {
        if (!countdownInterval) {
            paymentTimerContainer.classList.add('visible');
            countdownEndTime = Date.now() + 5 * 60 * 1000;

            countdownInterval = setInterval(() => {
                const now = Date.now();
                const remainingTime = countdownEndTime - now;

                if (remainingTime <= 0) {
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                    paymentTimerContainer.classList.remove('visible');
                    alert('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà');
                    
                    if (createdOrderNumber && window.API) {
                        cancelOrderOnBackend(createdOrderNumber);
                    }
                    
                    localStorage.removeItem('shoppingCart');
                    window.location.href = 'index.html';
                    return;
                }

                const minutesLeft = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                const secondsLeft = Math.floor((remainingTime % (1000 * 60)) / 1000);
                
                const countdownElement = document.getElementById('countdown-timer');
                if (countdownElement) {
                    countdownElement.textContent = `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ${String(minutesLeft).padStart(2, '0')}:${String(secondsLeft).padStart(2, '0')}`;
                }
            }, 1000);
        }
    }

    function stopPaymentCountdown() {
        if (countdownInterval) {
            clearInterval(countdownInterval);
            countdownInterval = null;
        }
        if (paymentTimerContainer) {
            paymentTimerContainer.classList.remove('visible');
        }
    }

    async function cancelOrderOnBackend(orderNumber) {
        try {
            if (window.API && typeof window.API.cancelOrder === 'function') {
                await window.API.cancelOrder(orderNumber);
                console.log('‚úÖ Order cancelled on backend:', orderNumber);
            }
        } catch (error) {
            console.error('‚ùå Failed to cancel order on backend:', error);
        }
    }

    // --- Event Listeners ---
    
    // Quantity controls
    if (summaryItemsList) {
        summaryItemsList.addEventListener('click', (event) => {
            const target = event.target;
            if (!target.classList.contains('quantity-btn')) return;
            
            const itemId = parseInt(target.getAttribute('data-id'));
            const itemInCart = cart.find(item => item.id === itemId);
            
            if (!itemInCart) return;
            
            if (target.classList.contains('plus-btn')) {
                itemInCart.quantity++;
            } else if (target.classList.contains('minus-btn')) {
                itemInCart.quantity--;
                if (itemInCart.quantity <= 0) {
                    cart = cart.filter(item => item.id !== itemId);
                }
            }
            
            discount = 0;
            currentPromoCode = null;
            if (promoCodeInput) promoCodeInput.value = '';
            saveAndReRender();
        });
        
        summaryItemsList.addEventListener('input', (event) => {
            const target = event.target;
            if (target.classList.contains('note-input')) {
                const itemId = parseInt(target.getAttribute('data-id'));
                const itemInCart = cart.find(item => item.id === itemId);
                if (itemInCart) {
                    itemInCart.notes = target.value;
                    saveCart();
                }
            }
        });
    }

    // Promo code
    if (applyPromoBtn) {
        applyPromoBtn.addEventListener('click', async () => {
            const code = promoCodeInput.value.trim().toUpperCase();
            
            if (!code) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô');
                return;
            }

            if (!window.API) {
                alert('‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö');
                return;
            }

            try {
                applyPromoBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...';
                applyPromoBtn.disabled = true;

                const result = await window.API.validatePromoCode(code, subtotal);
                
                if (result.success) {
                    discount = result.data.discount;
                    currentPromoCode = code;
                    updateTotals();
                    alert(`‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™ ${code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î: ${discount.toFixed(2)}‡∏ø`);
                }
            } catch (error) {
                discount = 0;
                currentPromoCode = null;
                updateTotals();
                alert('‚ùå ' + error.message);
            } finally {
                applyPromoBtn.textContent = '‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î';
                applyPromoBtn.disabled = false;
            }
        });
    }

    // Cancel order button
    if (cancelOrderBtn) {
        cancelOrderBtn.addEventListener('click', async () => {
            const confirmCancel = confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
            if (confirmCancel) {
                stopPaymentCountdown();
                
                if (createdOrderNumber && window.API) {
                    await cancelOrderOnBackend(createdOrderNumber);
                }
                
                localStorage.removeItem('shoppingCart');
                alert('‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
                window.location.href = 'index.html';
            }
        });
    }

    // Payment confirmed button
    if (paymentConfirmedBtn) {
        paymentConfirmedBtn.addEventListener('click', async () => {
            console.log('üí∞ User clicked payment confirmation');
            
            if (!createdOrderNumber || !window.API) {
                alert('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
                return;
            }
            
            try {
                paymentConfirmedBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...';
                paymentConfirmedBtn.disabled = true;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                console.log('üîç Checking payment status...');
                const paymentStatus = await window.API.checkPaymentStatus(createdOrderNumber);
                
                console.log('Payment status result:', paymentStatus);
                
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                if (!paymentStatus.data.isPaid) {
                    console.log('‚ùå Payment not verified');
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    alert('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"');
                    
                    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°
                    paymentConfirmedBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
                    paymentConfirmedBtn.disabled = false;
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    if (qrCodeContainer) {
                        qrCodeContainer.style.animation = 'shake 0.5s';
                        setTimeout(() => {
                            qrCodeContainer.style.animation = '';
                        }, 500);
                    }
                    
                    return;
                }
                
                // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                console.log('‚úÖ Payment verified!');
                
                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏±‡∏ö backend
                paymentConfirmedBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...';
                await window.API.confirmPayment(createdOrderNumber, true);
                console.log('‚úÖ Payment confirmed on backend');
                
                // ‡∏´‡∏¢‡∏∏‡∏î countdown
                stopPaymentCountdown();
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
                if (qrModal) qrModal.style.display = 'none';
                if (orderSuccessModal) {
                    orderNumberSpan.textContent = createdOrderNumber || 'ERROR';
                    orderSuccessModal.style.display = 'flex';
                }
                
                // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                setTimeout(() => {
                    localStorage.removeItem('shoppingCart');
                    window.location.href = 'index.html';
                }, 4000);
                
            } catch (error) {
                console.error('‚ùå Failed to confirm payment:', error);
                
                // ‡∏ñ‡πâ‡∏≤ error ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                if (error.message.includes('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô')) {
                    alert('‚ö†Ô∏è ' + error.message);
                } else {
                    alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
                }
                
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°
                paymentConfirmedBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
                paymentConfirmedBtn.disabled = false;
            }
        });
    }

    // Close modal button
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', () => {
            if (qrModal) qrModal.style.display = 'none';
        });
    }
    
    if (qrModal) {
        qrModal.addEventListener('click', (event) => {
            if (event.target === qrModal) {
                qrModal.style.display = 'none';
            }
        });
    }

    // --- FORM SUBMISSION ---
    if (checkoutForm) {
        checkoutForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            event.stopPropagation();
            
            console.log('üìù Form submitted - Creating order');
            
            try {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                const paymentRadio = document.querySelector('input[name="payment"]:checked');
                if (!paymentRadio) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
                    return;
                }
                
                const selectedPayment = paymentRadio.value;
                console.log('üí≥ Payment method:', selectedPayment);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                const nameInput = document.getElementById('name');
                const phoneInput = document.getElementById('phone');
                
                if (!nameInput || !phoneInput) {
                    alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                    return;
                }
                
                if (!nameInput.value.trim()) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö');
                    nameInput.focus();
                    return;
                }
                
                if (!phoneInput.value.trim()) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
                    phoneInput.focus();
                    return;
                }
                
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                const finalTotal = parseFloat(totalPriceEl.textContent.replace('‡∏ø', ''));
                console.log('üí∞ Final total:', finalTotal);
                
                if (finalTotal <= 0 || isNaN(finalTotal)) {
                    alert("‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó");
                    return;
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ API
                if (!window.API) {
                    alert('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n1. Backend Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà\n2. ‡πÑ‡∏ü‡∏•‡πå api.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n3. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
                    console.error('‚ùå window.API is not defined');
                    return;
                }
                
                // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                const orderData = {
                    customerName: nameInput.value.trim(),
                    phone: phoneInput.value.trim(),
                    items: cart.map(item => ({
                        id: item.id,
                        quantity: item.quantity || 1,
                        notes: item.notes || ''
                    })),
                    promoCode: currentPromoCode,
                    paymentMethod: selectedPayment
                };
                
                console.log('üì§ Sending order to backend:', orderData);
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô Backend
                const orderResult = await window.API.createOrder(orderData);
                
                if (orderResult.success) {
                    createdOrderNumber = orderResult.data.orderNumber;
                    console.log('‚úÖ Order created:', createdOrderNumber);
                    console.log('   Order details:', orderResult.data);
                    
                    // ‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PromptPay
                    if (selectedPayment === 'promptpay') {
                        // ‡πÅ‡∏™‡∏î‡∏á loading
                        qrCodeContainer.innerHTML = `
                            <div style="text-align: center; padding: 40px;">
                                <i class="fas fa-spinner fa-spin" style="font-size: 48px; color: #28a745;"></i>
                                <p style="margin-top: 20px; font-size: 16px; color: #666; font-family: 'Kanit', sans-serif;">
                                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...
                                </p>
                            </div>
                        `;
                        
                        // ‡πÅ‡∏™‡∏î‡∏á modal
                        qrModal.style.display = 'flex';
                        
                        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ UI update
                        await new Promise(resolve => setTimeout(resolve, 300));
                        
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                        if (typeof generatePromptPayQR !== 'function') {
                            console.error('‚ùå generatePromptPayQR function not found');
                            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå qr-generator-v2.js ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                        }
                        
                        if (typeof QRCode === 'undefined') {
                            console.error('‚ùå QRCode library not found');
                            // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            if (typeof QRCode === 'undefined') {
                                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code library\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö');
                            }
                        }
                        
                        // ‡πÄ‡∏ö‡∏≠‡∏£‡πå PromptPay ‡∏à‡∏≤‡∏Å backend
                        const promptPayId = promptpayConfig ? promptpayConfig.phoneNumber : '0914974798';
                        
                        console.log('üîß Generating QR Code...');
                        console.log('   PromptPay:', promptPayId);
                        console.log('   Amount:', finalTotal);
                        
                        // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
                        const qrGenerated = generatePromptPayQR(promptPayId, finalTotal, qrCodeContainer);
                        
                        if (qrGenerated) {
                            console.log('‚úÖ QR Code generated successfully');
                            managePaymentCountdown();
                        } else {
                            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
                        }
                    } else {
                        // ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                        console.log('üíµ Cash payment selected');
                        orderNumberSpan.textContent = createdOrderNumber;
                        orderSuccessModal.style.display = 'flex';
                        
                        setTimeout(() => {
                            localStorage.removeItem('shoppingCart');
                            window.location.href = 'index.html';
                        }, 3000);
                    }
                } else {
                    throw new Error(orderResult.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
                }
                
            } catch (error) {
                console.error('‚ùå Error in form submission:', error);
                
                // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô QR container ‡∏ñ‡πâ‡∏≤ modal ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                if (qrModal && qrModal.style.display === 'flex' && qrCodeContainer) {
                    qrCodeContainer.innerHTML = `
                        <div style="text-align: center; padding: 30px; color: #d32f2f;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px;"></i>
                            <p style="font-size: 18px; font-weight: bold; margin-bottom: 10px; font-family: 'Kanit', sans-serif;">
                                ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                            </p>
                            <p style="font-size: 14px; font-family: 'Kanit', sans-serif; line-height: 1.6;">
                                ${error.message}
                            </p>
                            <button onclick="location.reload()" style="
                                margin-top: 20px;
                                padding: 12px 24px;
                                background: #d32f2f;
                                color: white;
                                border: none;
                                border-radius: 5px;
                                cursor: pointer;
                                font-family: 'Kanit', sans-serif;
                                font-size: 14px;
                                font-weight: bold;
                            ">
                                <i class="fas fa-redo"></i> ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
                            </button>
                        </div>
                    `;
                }
                
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            }
        });
        
        console.log('‚úÖ Form submit listener attached');
    } else {
        console.error('‚ùå Form element not found!');
    }

    // --- Load PromptPay Configuration ---
    async function loadPromptPayConfig() {
        try {
            console.log('üì± Loading PromptPay configuration...');
            const response = await API.get('/promptpay');
            if (response.success) {
                promptpayConfig = response.data;
                console.log('‚úÖ PromptPay config loaded:', promptpayConfig);
            } else {
                console.error('‚ùå Failed to load PromptPay config');
                // Fallback to default
                promptpayConfig = {
                    phoneNumber: '0914974798',
                    name: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏°‡πà‡∏°‡∏ì‡∏µ'
                };
            }
        } catch (error) {
            console.error('‚ùå Error loading PromptPay config:', error);
            // Fallback to default
            promptpayConfig = {
                phoneNumber: '0914974798',
                name: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏°‡πà‡∏°‡∏ì‡∏µ'
            };
        }
    }

    // Initialize
    async function init() {
        await loadPromptPayConfig();
        renderCart();
        console.log('‚úÖ Checkout page initialized');
    }
    
    init();
});