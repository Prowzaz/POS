/**
 * PromptPay QR Code Generator v4.0 - WORKING VERSION
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô 100%
 */

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PromptPay QR Code ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô EMVCo
 */
function generatePromptPayQR(promptPayId, amount, containerElement) {
    console.log("üöÄ PromptPay QR Generator v4.0 - WORKING VERSION");
    console.log("üì± Input:", { promptPayId, amount });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!promptPayId || !containerElement || typeof amount !== 'number' || amount <= 0) {
        console.error("‚ùå Invalid input data");
        showErrorInContainer(containerElement, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        return false;
    }

    try {
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        const processedPhone = processPhoneNumber(promptPayId);
        if (!processedPhone) {
            showErrorInContainer(containerElement, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return false;
        }

        console.log("‚úÖ Processed phone:", processedPhone);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload
        const payload = generatePromptPayPayload(processedPhone, amount);
        if (!payload) {
            showErrorInContainer(containerElement, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡πÑ‡∏î‡πâ");
            return false;
        }

        console.log("‚úÖ Generated payload:", payload);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
        const success = createQRCodeDisplay(payload, amount, processedPhone, containerElement);
        
        if (success) {
            console.log("üéâ QR Code generated successfully!");
            return true;
        } else {
            showErrorInContainer(containerElement, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ");
            return false;
        }

    } catch (error) {
        console.error("‚ùå Error:", error);
        showErrorInContainer(containerElement, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
        return false;
    }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function processPhoneNumber(phoneNumber) {
    // ‡∏•‡∏ö‡∏Ç‡∏µ‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    let cleaned = phoneNumber.replace(/[-\s]/g, '').trim();
    
    console.log("üîß Processing phone:", cleaned);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 66XXXXXXXXX (11 ‡∏´‡∏•‡∏±‡∏Å)
    if (cleaned.length === 10 && cleaned.startsWith('0')) {
        // ‡∏à‡∏≤‡∏Å 0914974798 -> 66914974798
        cleaned = '66' + cleaned.substring(1);
    } else if (cleaned.length === 9) {
        // ‡∏à‡∏≤‡∏Å 914974798 -> 66914974798
        cleaned = '66' + cleaned;
    } else if (cleaned.length === 11 && cleaned.startsWith('66')) {
        // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        cleaned = cleaned;
    } else if (cleaned.length === 13 && cleaned.startsWith('+66')) {
        // ‡∏à‡∏≤‡∏Å +66914974798 -> 66914974798
        cleaned = cleaned.substring(1);
    } else {
        console.error("‚ùå Invalid phone format:", phoneNumber);
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (cleaned.length !== 11 || !cleaned.startsWith('66')) {
        console.error("‚ùå Invalid processed phone:", cleaned);
        return null;
    }
    
    console.log("‚úÖ Final phone number:", cleaned);
    return cleaned;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PromptPay Payload ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô EMVCo
 */
function generatePromptPayPayload(mobileNumber, amount) {
    console.log("üîß Generating PromptPay payload");
    console.log("   Mobile:", mobileNumber);
    console.log("   Amount:", amount);
    
    try {
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á TLV (Tag-Length-Value)
        function createTLV(tag, value) {
            const length = value.length.toString().padStart(2, '0');
            return tag + length + value;
        }
        
        // 1. Payload Format Indicator (Tag 00)
        const payloadFormat = createTLV('00', '01');
        
        // 2. Point of Initiation Method (Tag 01)
        const pointOfInitiation = createTLV('01', '12');
        
        // 3. Merchant Account Information (Tag 29 for PromptPay)
        const guid = createTLV('00', 'A000000677010111');
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å 66XXXXXXXXX -> 0066XXXXXXXXX
        const mobileForPayload = '0066' + mobileNumber.substring(2);
        const mobile = createTLV('01', mobileForPayload);
        
        console.log("   Mobile for payload:", mobileForPayload);
        
        const merchantAccount = createTLV('29', guid + mobile);
        
        // 4. Transaction Currency (Tag 53) - 764 = THB
        const currency = createTLV('53', '764');
        
        // 5. Transaction Amount (Tag 54)
        const amountStr = amount.toFixed(2);
        const transactionAmount = createTLV('54', amountStr);
        
        // 6. Country Code (Tag 58)
        const countryCode = createTLV('58', 'TH');
        
        // 7. ‡∏£‡∏ß‡∏° payload (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ CRC)
        let payload = payloadFormat + 
                      pointOfInitiation + 
                      merchantAccount + 
                      currency + 
                      transactionAmount + 
                      countryCode;
        
        // 8. ‡πÄ‡∏û‡∏¥‡πà‡∏° CRC placeholder ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì CRC
        payload = payload + '6304'; // Tag 63, Length 04
        const crc = calculateCRC16(payload);
        payload = payload + crc;
        
        console.log("üìã Final payload:", payload);
        
        return payload;
        
    } catch (error) {
        console.error("‚ùå Error generating payload:", error);
        return null;
    }
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì CRC16 ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ISO/IEC 13239
 */
function calculateCRC16(payload) {
    const polynomial = 0x1021;
    let crc = 0xFFFF;
    
    for (let i = 0; i < payload.length; i++) {
        crc ^= (payload.charCodeAt(i) << 8);
        
        for (let j = 0; j < 8; j++) {
            if ((crc & 0x8000) !== 0) {
                crc = ((crc << 1) ^ polynomial);
            } else {
                crc = (crc << 1);
            }
        }
    }
    
    crc = crc & 0xFFFF;
    const result = crc.toString(16).toUpperCase().padStart(4, '0');
    console.log("üî¢ CRC16:", result);
    return result;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• QR Code - VERSION ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
 */
function createQRCodeDisplay(payload, amount, phoneNumber, container) {
    try {
        console.log("üé® Creating QR Code display...");
        
        // ‡∏•‡πâ‡∏≤‡∏á container
        container.innerHTML = '';
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper ‡∏´‡∏•‡∏±‡∏Å
        const mainWrapper = document.createElement('div');
        mainWrapper.style.cssText = `
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
        `;
        container.appendChild(mainWrapper);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code
        const qrWrapper = document.createElement('div');
        qrWrapper.style.cssText = `
            background: white;
            padding: 25px;
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            border: 2px solid #28a745;
        `;
        mainWrapper.appendChild(qrWrapper);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        const title = document.createElement('div');
        title.style.cssText = `
            font-size: 18px;
            font-weight: bold;
            color: #28a745;
            margin-bottom: 15px;
            text-align: center;
        `;
        title.innerHTML = '<i class="fas fa-qrcode"></i> PromptPay QR Code';
        qrWrapper.appendChild(title);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á div ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code
        const qrDiv = document.createElement('div');
        qrDiv.id = 'qrcode-display-' + Date.now();
        qrDiv.style.cssText = `
            margin: 10px 0;
            background: white;
            padding: 10px;
            border-radius: 8px;
        `;
        qrWrapper.appendChild(qrDiv);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
        console.log("üîç Checking QRCode library...");
        
        if (typeof QRCode !== 'undefined') {
            console.log("‚úÖ QRCode library found, creating QR Code...");
            
            try {
                new QRCode(qrDiv, {
                    text: payload,
                    width: 220,
                    height: 220,
                    colorDark: "#000000",
                    colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.M
                });
                console.log("‚úÖ QR Code created successfully");
            } catch (qrError) {
                console.error("‚ùå QR Code creation failed:", qrError);
                showErrorInContainer(container, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ: " + qrError.message);
                return false;
            }
        } else {
            console.error("‚ùå QRCode library not found");
            showErrorInContainer(container, "‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code library");
            return false;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        const paymentInfo = document.createElement('div');
        paymentInfo.style.cssText = `
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            border: 1px solid #e9ecef;
            width: 100%;
        `;
        paymentInfo.innerHTML = `
            <div style="font-size: 16px; font-weight: bold; color: #333; margin-bottom: 10px;">
                üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            </div>
            <div style="font-size: 14px; color: #666; margin-bottom: 8px;">
                ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: ${formatPhoneNumber(phoneNumber)}
            </div>
            <div style="font-size: 24px; font-weight: bold; color: #28a745; margin-top: 10px;">
                ${amount.toFixed(2)} ‡∏ö‡∏≤‡∏ó
            </div>
        `;
        mainWrapper.appendChild(paymentInfo);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        const instructions = document.createElement('div');
        instructions.style.cssText = `
            background: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            text-align: left;
            border: 1px solid #90caf9;
            width: 100%;
            font-size: 14px;
            line-height: 1.8;
        `;
        instructions.innerHTML = `
            <div style="font-weight: bold; color: #1976d2; margin-bottom: 10px; text-align: center;">
                üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            </div>
            <div style="color: #1565c0;">
                1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì<br>
                2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π "‡∏™‡πÅ‡∏Å‡∏ô QR" ‡∏´‡∏£‡∏∑‡∏≠ "PromptPay"<br>
                3. ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô<br>
                4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br>
                5. ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            </div>
        `;
        mainWrapper.appendChild(instructions);

        console.log("‚úÖ QR Code display created successfully");
        return true;

    } catch (error) {
        console.error("‚ùå Error creating QR display:", error);
        showErrorInContainer(container, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
        return false;
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 */
function formatPhoneNumber(phoneNumber) {
    // ‡∏à‡∏≤‡∏Å 66XXXXXXXXX -> 0XX-XXX-XXXX
    if (phoneNumber.startsWith('66') && phoneNumber.length === 11) {
        const local = phoneNumber.substring(2);
        return '0' + local.substring(0, 2) + '-' + local.substring(2, 5) + '-' + local.substring(5);
    }
    return phoneNumber;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
 */
function showErrorInContainer(container, message) {
    container.innerHTML = `
        <div style="
            text-align: center; 
            padding: 30px;
            color: #d32f2f;
            background: #ffebee;
            border-radius: 15px;
            border: 2px solid #ef5350;
            max-width: 400px;
            margin: 0 auto;
        ">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; display: block; color: #d32f2f;"></i>
            <p style="font-size: 18px; margin-bottom: 10px; font-weight: bold;">${message}</p>
            <p style="font-size: 14px; color: #666; line-height: 1.6;">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:<br>
                ‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï<br>
                ‚Ä¢ ‡πÄ‡∏ö‡∏≠‡∏£‡πå PromptPay ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br>
                ‚Ä¢ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </p>
            <button onclick="location.reload()" style="
                margin-top: 15px;
                padding: 10px 20px;
                background: #d32f2f;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-family: 'Kanit', sans-serif;
            ">
                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
            </button>
        </div>
    `;
}

// Export functions
window.generatePromptPayQR = generatePromptPayQR;
window.processPhoneNumber = processPhoneNumber;

console.log("‚úÖ PromptPay QR Generator v4.0 - WORKING VERSION loaded successfully!");
console.log("üì± Ready to generate QR codes for any PromptPay number");